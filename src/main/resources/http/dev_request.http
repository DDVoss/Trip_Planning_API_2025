### 1. Setup: register and login
POST {{url}}/auth/register/

{
    "username": "user",
    "password": "test123"
}

### 2. Login and store JWT token
POST {{url}}/auth/login/

{
    "username": "user",
    "password": "test123"
}
> {%
    client.global.set("jwt_token", response.body.token);
%}

### 3. Make user an admin
POST {{url}}/auth/user/addrole/
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "role": "ADMIN"
}

### 3.a Refresh JWT token after role change
POST {{url}}/auth/login/

{
    "username": "user",
    "password": "test123"
}
> {%
    client.global.set("jwt_token", response.body.token);
    client.log("Refreshed jwt_token after role assignment");
%}

### 4 Populate database with sample data
POST {{url}}/trip/populate
Authorization: Bearer {{jwt_token}}

### 5. Test GET all trips
GET {{url}}/trip
Authorization: Bearer {{jwt_token}}

> {%
    client.log("GET all trips response: " + JSON.stringify(response.body));
    client.log("Number of trip entries: " + response.body.length);
%}

### 6. Test GET specific trip by ID
GET {{url}}/trip/1
Authorization: Bearer {{jwt_token}}

### 7. Create new trip and capture its ID
POST {{url}}/trip
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "name": "Test Beach Trip",
  "start": "2026-08-15T09:00:00",
  "end": "2026-08-15T17:00:00",
  "location": 55.6761,
  "price": 299.99,
  "guide": {
    "id": 1
  },
  "category": "Beach"
}
> {%
    client.log("Full response body: " + JSON.stringify(response.body));
    const id = response.body.id;
    client.global.set("trip_id", id);
    client.log("Captured trip_id: " + id);
%}


### 8. Update the created trip
PUT {{url}}/trip/{{trip_id}}
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "name": "Test Beach Trip",
  "start": "2026-08-15T09:00:00",
  "end": "2026-08-15T17:00:00",
  "location": 55.6761,
  "price": 299.99,
  "guide": {
    "id": 1
  },
  "category": "Beach"
}

### 9. Delete the created trip
DELETE {{url}}/trip/{{trip_id}}
Authorization: Bearer {{jwt_token}}

### 10. Verify deletion
GET {{url}}/trip/{{trip_id}}
Authorization: Bearer {{jwt_token}}

### 11. Test GET all guides
GET {{url}}/guide
Authorization: Bearer {{jwt_token}}

### 12. Test GET specific guide by ID
GET {{url}}/guide/1
Authorization: Bearer {{jwt_token}}

### 13. Create new guide
POST {{url}}/guide
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "name": "New Guide",
  "email": "newguide@example.com",
  "phone": "12345678901",
  "yearsOfExperience": 3
}
> {%
    const id = response.body.id;
    client.global.set("guide_id", id);
    client.log("Captured guide_id: " + id);
%}

### 14. Update guide
PUT {{url}}/guide/{{guide_id}}
Content-Type: application/json
Authorization: Bearer {{jwt_token}}

{
  "name": "Updated Guide Name",
  "email": "updated@example.com",
  "phone": "98765432109",
  "yearsOfExperience": 5
}

### 15. Delete guide
DELETE {{url}}/guide/{{guide_id}}
Authorization: Bearer {{jwt_token}}